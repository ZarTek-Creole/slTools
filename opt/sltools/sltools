#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

source "/opt/sltools/sltools-functions"

Sent_Command() {
    #       -S sessionname
    # When creating a new session, this option can be used to specify a meaningful name for the session. This name identifies the session for "screen -list" and "screen -r" actions. It substitutes the default [tty.host] suffix.
    #       -p number_or_name
    # Preselect a window. This is usefull when you want to reattach to a specific windor or you want to send a command via the "-X" option to a specific window. As with screen's select commant, "-" selects the blank window. As a special case for reattach, "=" brings up the windowlist on the blank windo
    #       -X
    # Send the specified command to a running screen session. You can use the -d or -r option to tell screen to look only for attached or detached screen sessions. Note that this command doesn't work if the session is password protected.
    screen -S "${slftp_screen_name}" -p 0 -X stuff "stop^M"
}

Run_SLFTP_Internal() {
    if [[ "$(screen -ls)" = *${slftp_screen_name}* ]]; then
        Sent_Error  "004" "$(m_tr "slFTP: Already running.")"
    else
        [ "$(whoami)" != "${unix_user} " ] && su -l ${unix_user} -c "screen -dmS ${slftp_screen_name} /usr/bin/sltools-core run" || screen -dmS  ${slftp_screen_name} /usr/bin/sltools-core run
        local retVal=$?
        [ ${retVal} -ne 0 ] && Sent_Error  "005"  "$(m_tr "Error starting slftp screen.")"
        ps aux | grep ${unix_user} | grep ${slftp_screen_name}
    fi
}

Run_SLFTP() {
    [[ $(readlink -f -- "${slftp_directory}"/"${slftp_binary_name}") == "" ]] && Sent_Error "006" "$(m_tr "%s is missing." "${slftp_directory}"/"${slftp_binary_name}")"
    cd "${slftp_directory}" || exit
    local re='^[0-9]+$'
    ! [[ ${start_reset_files} =~ ${re} ]] && Sent_Error "007" "$(m_tr "Invalid value for option '%s' , check configuration file." "start_reset_files")"
    [ "${reset_list}" != "" ] && rm -f "${reset_list}"
    ! [[ "${slftp_restart_onfailure}" =~ ${re} ]] && Sent_Error  "008" "$(m_tr "Invalid value for option '%s' , check configuration file." "slftp_restart_onfailure")"
    Run_SLFTP_Internal
    exit 1
}

Install_SLFTP() {
    [ ! -d "/opt/src/slftp" ] && sudo sudo git clone --branch ${slftp_version:-dev} https://gitlab.com/slftp/slftp.git /opt/src/slftp
    cd /opt/src/slftp || exit
    [[ ! -f "/opt/src/slftp/Makefile" ]] && Sent_Error "010" "$(m_tr "Code source need update for %s." "SLFTP")"
    sudo sed -i "s@SLFTPPATH = ~/slftp@SLFTPPATH = ${slftp_directory}@" /opt/src/slftp/Makefile
    [ ! -d "${slftp_directory}" ] && sudo mkdir -p "${slftp_directory}" && sudo chown $(whoami) -R "${slftp_directory}"
    sudo make all_64 || exit
    sudo make install || exit
    [ "${slftp_wide_system}" = 1 ] && ln -s "${slftp_directory}"/"${slftp_binary_name}" /usr/bin/

}

Missing_SLFTP() {
    Sent_Debug "[RUN] Missing_SLFTP"
    PS3="$(m_tr "Select the operation"): "
    select opt in                           \
        "$(m_tr "Install automatically")"   \
        "$(m_tr "Install manually")"        \
        "$(m_tr "Quit")";
        do
            case ${opt} in
                "$(m_tr "Install automatically")") Install_SLFTP; sleep 2;;
                "$(m_tr "Install manually")") Sent_MSG "$(m_tr "To install manually visit the URL address: %s" "${URL_SITE_SLFTP}")"; exit 0;;
                "$(m_tr "Quit")") break;;
                *) echo "$(m_tr "Invalid option") ${REPLY}";;
            esac
        done
    Sent_Debug "[OK] Missing_SLFTP"
}

Install_FPC() {
    cd /tmp || exit
    y
    tar xf "fpc.tar"
    cd "fpc-${FPC_VERSION}.${FPC_ARCH}" || exit
    echo -e '/usr\nN\nN\nN\n' | sudo ./install.sh
    find "/usr/lib/fpc/${FPC_VERSION}/units/${FPC_ARCH}/" -type d -mindepth 1 -maxdepth 1 \
        -not -name 'fcl-base' \
        -not -name 'rtl' \
        -not -name 'rtl-console' \
        -not -name 'rtl-objpas' \
        -exec rm -fr {} \; 
    rm -r "/tmp/fpc*"

}

Missing_FPC() {
    Sent_Debug "[RUN] Missing_FPC"
    PS3="$(m_tr "Select the operation"): "
    select opt in                           \
        "$(m_tr "Install automatically")"   \
        "$(m_tr "Install manually")"        \
        "$(m_tr "Quit")";
    do
        case ${opt} in
            "$(m_tr "Install automatically")") Install_FPC; sleep 2; Main_Menu; break;;
            "$(m_tr "Install manually")") Sent_MSG "$(m_tr "To install manually visit the URL address: %s" "${URL_SITE_FPC}")"; exit 0;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
    Sent_Debug "[OK] Missing_FPC"
}



Menu_SLFTP () {
    banner "Menu SLFTP"
    Sent_Debug "[RUN] Menu_SLFTP"
    PS3="$(m_tr "Select the operation"): "
    select opt in                       \
        "$(m_tr "Run")"                 \
        "$(m_tr "Stop")"                \
        "$(m_tr "Join")"                \
        "$(m_tr "Install")"             \
        "$(m_tr "Update")"              \
        "$(m_tr "Back to main menu")"   \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Run")") Run_SLFTP; sleep 2; Main_Menu; break;;
            "$(m_tr "Stop")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Join")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Install")") Install_SLFTP; sleep 2; Main_Menu; break;;
            "$(m_tr "Update")")  sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
}
Menu_FPC () {
    banner "Free Pascal Compiler"
    Sent_Debug "[RUN] Menu_FPC"
    PS3="$(m_tr "Select the operation"): "
    select opt in                       \
        "$(m_tr "Install")"             \
        "$(m_tr "Back to main menu")"   \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Install")") Missing_FPC; sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
}
Menu_slTools () {
    banner "Menu SL-Tools"
    Sent_Debug "[RUN] Menu_slTools"
    PS3="$(m_tr "Select the operation"): "
    select opt in                       \
        "$(m_tr "Config")"              \
        "$(m_tr "Update")"              \
        "$(m_tr "Info")"                \
        "$(m_tr "Uninstall")"           \
        "$(m_tr "Back to main menu")"   \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Config")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Update")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Info")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Uninstall")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
    Sent_Debug "[OK] Menu_slTools"
}

Main_Menu () {
    banner "Menu main"
    Sent_Debug "[RUN] Main_Menu"
    PS3="$(m_tr "Select the operation"): "
    select opt in                   \
        "$(m_tr "Menu SLFTP")"      \
        "$(m_tr "Menu SL-Tools")"   \
        "$(m_tr "Menu cbFTP")"      \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Menu SLFTP")") Menu_SLFTP break;;
            "$(m_tr "Menu SL-Tools")") Menu_slTools break;;
            "$(m_tr "Menu cbFTP")") Menu_slTools break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
    Sent_Debug "[OK] Main_Menu"
}

# Terminal command
console_usage() { 
  Sent_MSG "Usage: $0 " 1>&2 
}

console_run_usage() {
    Sent_MSG "test -> $@"
    
}

console_run() {
    shift
    [[ $1 == "" ]] && console_run_usage $@ && return
    Init_Config
    [[ $1 == "slftp" ]] && Run_SLFTP && return
    [[ $1 == "slftp_internal" ]] && Run_SLFTP_Internal && return
}

console_main() {
    [[ ${1:-} == "" ]] && return;
    [ "$1" = "--help" -o "$1" = "-h" ] && console_usage
    [[ $1 == "run" ]] && console_run $@;
    while getopts ":r:v" options; do 
        case "${options}" in
            v) Sent_MSG "$(m_tr "Sl-Tools, current version V%s. Website: %s" "${VER}" "${URL_SLTOOLS}")"; exit ;;
            "r") Sent_MSG "n = ${OPTARG}"; exit ;;
            *) console_usage;;
        esac
    done
    exit 0    
}


# run sltools
#banner
Init
Init_Files
Init_Config
Init_Binary
Init_Account_Unix
console_main "$@"
Main_Menu
#!/usr/bin/bash
VER=0.3
DEBUG=0
LOG=1

banner() {
    [ "${DEBUG}" -ne 1 ] && clear
    echo "
           __         (█)    ( ▄▄▄▄(█)▄▄▄▄ )   ,---.         ( ) ▀     ▀ ( )
          |  \    ▄▄▄▄███▄▄▄▄ ▐░░░░░░░░░░░▌   ' S ,'\   \(/     \  ▀▀▀  /
  _______ | ██   ▐░░░░░█░░░░░▌▐░█▀▀▀▀▀▀▀█░▌  / L /   |  /▄\    ▄    ▄▄▄▄
 /       \| ██    ▀▀▀▀█░█▀▀▀▀ ▐░▌ ████▄ ▐░▌ . O ; ,. :  |█|   ▀▄▀  █     ▀▄
|  ██-█▀█▄| ██        ▐░▌     ▐░▌ █   █ ▐░▌ ' O | |: :  |█|____ ▄  ▀▀▀▀▄  L
 \▀█▄   \ | ██   ██   ▐░▌     ▐░▌ ▀████ ▐░▌ ' T | .; :  \█▀▀███| ▀▄▄▄▄▀    
  \█ ▄███\| ██        ▐░▌     ▐░█▄▄▄▄▄▄▄█░▌ | L :    |  :/ /::::  ▄   ▄
 ___   ▄█▀| ██         █      ▐░░░░░░░░░░░▌  \ S \  / By/ /ZarTeK ▌   ▌
 \▄▄▄▄▄_█▀ \██        /)\      ▀▀▀▀▀▀▀▀▀▀▀    \`----'  _/  \_       ▀   ▀"
    echo "
                  Hi $(whoami), Welcome to the sl-Tools v$VER
    "
    [[ ! -z "$1" ]] && SubBanner $*
}
SubBanner() {
  echo "....................................................................."
  display_center "$*"
  echo "....................................................................."
}
display_center() {
    local x
    local y
    text="$*"
    x=$(( (70 - ${#text}) / 2))
    echo -ne "\E[6n";read -sdR y; y=$(echo -ne "${y#*[}" | cut -d';' -f1)
    echo -ne "\033[${y};${x}f$*\n"
}
# trap ctrl-c and call ctrl_c()
trap ctrl_c INT
ctrl_c() {
    echo " ** CTRL-C ..."
    exit 1
}
Sent_MSG () {
    # Sent_MSG "$msg" $value1 $value2 $value...
    # Sent_MSG 'Hello %s, you are %s years old. You are of %s age.' "Charlie" "19" "legal"
    printf  "[sl-TOOLS] $@"
    printf  "\n"
}

Sent_Error() {
    Sent_MSG  "$@"
    if [ "$LOG" = 1 ]; then Sent_MSG "[$(date)] [ERROR] $*" >> "${FILE_LOG}"; fi
    exit 0
}
Sent_Debug() {
    if [ "${DEBUG}" = 1 ]; then Sent_MSG "[DEBUG] $@" && sleep 0.2; fi
    if [ "$LOG" = 1 ]; then Sent_MSG "[$(date)] [ERROR] $*" >> "${FILE_LOG}"; fi
}
Sent_Command() {
    #       -S sessionname
    # When creating a new session, this option can be used to specify a meaningful name for the session. This name identifies the session for "screen -list" and "screen -r" actions. It substitutes the default [tty.host] suffix.
    #       -p number_or_name
    # Preselect a window. This is usefull when you want to reattach to a specific windor or you want to send a command via the "-X" option to a specific window. As with screen's select commant, "-" selects the blank window. As a special case for reattach, "=" brings up the windowlist on the blank windo
    #       -X
    # Send the specified command to a running screen session. You can use the -d or -r option to tell screen to look only for attached or detached screen sessions. Note that this command doesn't work if the session is password protected.
    ${binary_screen} -S "${slftp_screen_name}" -p 0 -X stuff "stop^M"
}

m_tr() { 
    echo $(gettext sltools "$1") 
}
Init() {
    URL_SITE_SLFTP="https://gitlab.com/slftp/slftp"
    BINS_NEEDED="echo grep basename cut sha256sum printf tr head tail tar git touch screen gettext sudo su"
    FILE_CONF=/etc/slftp/sltools.cfg
    FILE_CONF_DEF=/etc/slftp/sltools.cfg.dist
    FILE_LOG=/var/log/sltools.log
    Sent_Debug "[OK] Init"
}
Init_Files() {
    [ ! -f "${FILE_CONF}" ] && Sent_MSG $(m_tr "(Err_004) The following SL-Tools file is missing: '%s'. Creating the file ...") ${FILE_CONF} && mkdir -p "$(dirname "${FILE_CONF}")" && touch "${FILE_CONF}"
    source "${FILE_CONF}"
    # Efface les anciens logs ...
    [ -f "$FILE_LOG" ] && sudo rm "$FILE_LOG" && sudo touch "$FILE_LOG" && sudo chown ${unix_user}.${unix_GROUP} "$FILE_LOG"
}
Init_Binary() {
    Sent_Debug "[RUN] Init_Binary"
    # check for needed bins
    for BIN in ${BINS_NEEDED}; do
        if [ "$(command -v "${BIN}")" != "" ]; then
            Sent_Debug "[+] FOUND: ${BIN}"
        else
            Sent_Debug "[-] NOT FOUND: ${BIN}"
            BINS_MISSING="${BINS_MISSING} ${BIN}"
        fi
    done
    if [ -n "${BINS_MISSING}" ]; then
        Sent_Error "$(m_tr "[!] Some binaries are missing:%s.Check dependencies on https://github.com/ZarTek-Creole/slTools")" "${BINS_MISSING}"

    fi
    if [[ "$(command -v fpc)" == "" ]]; then
        Sent_Error "$(m_tr "(Err_015) FPC (Free Pascal Compiler) is missing to compiler slftp.")"
    fi
    if [[ "$(command -v "${slftp_binary_name}")" == "" ]] && [[ $(readlink -f -- "${slftp_directory}"/"${slftp_binary_name}") == "" ]]; then
        banner "SLFTP"
        Sent_MSG "$(m_tr "(Err_016) %s is missing.")" "${slftp_binary_name}"
        printf '\n'
        Missing_SLFTP
    fi
    Sent_Debug "[OK] Init_Binary"
}
Config_Init() {
    Sent_Debug "[RUN] config"
    Config_Check_Value "DEBUG"
    Config_Check_Value "LOG"
    Config_Check_Value "slftp_binary_name"
    Config_Check_Value "slftp_screen_name"
    Config_Check_Value "slftp_restart_onfailure"
    Config_Check_Value "slftp_directory"
    Config_Check_Value "start_reset_files"
    Config_Check_Value "unix_user"
    Config_Check_Value "unix_group"
    Config_Check_Value "slftp_wide_system"
    Sent_Debug "[OK] config"
}
Config_Set_Value() {
    Sent_Debug "[RUN] Config_Set_Value $*"
    [ ! -f ${FILE_CONF}_DEF ] && echo "creation de ${FILE_CONF}_DEF" && touch ${FILE_CONF}_DEF
    [ ! -f ${FILE_CONF} ] && echo "creation de ${FILE_CONF}" && touch ${FILE_CONF}
    if [[ -f "${FILE_CONF}" && "$( grep -c -w "$1" ${FILE_CONF})" = 1 ]]; then
	    value=$(grep -w "$1" ${FILE_CONF} | cut -d "=" -f2 | tr -d "\"")
    else
        value_default=$(cat ${FILE_CONF}_DEF | grep -w "$1" | cut -d "=" -f2 | tr -d "\"")
        Sent_MSG "$(m_tr "Please enter the value for %s, default [ %s ] : ")" "$1" "${value_default}"; read -r value
    	[ "$value" = "" ] && value=${value_default}
    fi
    [ "$(grep -c -w "$1=" ${FILE_CONF} )" = 0 ] && echo "$1"=\""$value"\" >> ${FILE_CONF}
    Sent_Debug "[OK] Config_Set_Value $*"
}
Config_Check_Value() {
    Sent_Debug "[RUN] Config_Check_Value $*"
    # test comment
    [[ ! -v "$1" ]] && Sent_MSG "$(m_tr "(Err_005) The configuration of '%s=Value' is missing in %s")" "$1" "${FILE_CONF}" && Config_Set_Value "$1" 
    Sent_Debug "[OK] Config_Check_Value $*"
}
Init_Account_Unix() {
    if Unix_Group_Exists "${unix_group}"; then 
        Sent_MSG "$(m_tr "The unix group '%s' does not exist, do you want to create it? [Y]es [N]o, default Y :")" "${unix_group}"; read -r create_group
        case ${create_group} in
            [YyoO]) Unix_Group_Create;;
            [Nn]) exit 1 ;;
            *) Unix_Group_Create;;
        esac
    fi
    if Unix_User_Exists "${unix_user}"; then 
        Sent_MSG "$(m_tr "The unix user '%s' does not exist, do you want to create it? [Y]es [N]o, default Y :")" "${unix_user}"; read -r create_user
        case ${create_user} in
            [YyoO]) Unix_User_Create;;
            [Nn]) exit 1 ;;
            *) Unix_User_Create;;
        esac
    fi
}
Run_SLFTP_Internal() {
    if [[ "$(${binary_screen} -ls)" = *${slftp_screen_name}* ]]; then
        Sent_Error "$(m_tr "(Err_001) slFTP: Already running.")"
    else
        screen_exec="${binary_screen} -S ${slftp_screen_name} bash -c \"/usr/bin/sltools run slftp_internal\""
        [ "$(whoami)" != "${unix_user} " ] && bash -c "su -l ${unix_user} -c "${screen_exec}"" || bash -c "${screen_exec}"
        retVal=$?
        [ ${retVal} -ne 0 ] && Sent_Error "$(m_tr "(Err_002) Error starting slftp screen.")"
        echo "slFTP: exec \"${screen_exec}'\" done."
        if [ ${slftp_restart_onfailure} == 1 ]; then 
            while [ 0 == 0 ]; do
                Sent_MSG "$(m_tr "Press [CTRL+C] to stop..")"
                Run_SLFTP_Internal
                ! [[ ${restart_wait} =~ ${re} ]] && Sent_Error "$(m_tr "(Err_020) Invalid value for option '%s' , check configuration file.")" "restart_wait"
                [ "${restart_wait}" != "0" ] && sleep ${restart_wait}
            done
        fi
    fi
}
Run_SLFTP() {
    [[ $(readlink -f -- "${slftp_directory}"/"${slftp_binary_name}") == "" ]] && Sent_Error "$(m_tr "(Err_017) %s is missing.")" "${slftp_directory}"/"${slftp_binary_name}"
    cd "${slftp_directory}" || exit
    re='^[0-9]+$'
    ! [[ ${start_reset_files} =~ ${re} ]] && Sent_Error "$(m_tr "(Err_020) Invalid value for option '%s' , check configuration file.")" "start_reset_files"
    [ "${reset_list}" != "" ] && rm -f "${reset_list}"
    ! [[ "${slftp_restart_onfailure}" =~ ${re} ]] && Sent_Error "$(m_tr "(Err_020) Invalid value for option '%s' , check configuration file.")" "slftp_restart_onfailure"
    Run_SLFTP_Internal
    exit 1
}
Install_SLFTP() {
    [ ! -d "/opt/src/slftp" ] && Sent_Error "$(m_tr "(Err_017) %s is missing.")" "/opt/src/slftp"
    cd /opt/src/slftp || exit
    [[ ! -f "/opt/src/slftp/Makefile" ]] && Sent_Error "$(m_tr "(Err_018) Code source need update for %s.")" "SLFTP"
    sed -i "s@SLFTPPATH = ~/slftp@SLFTPPATH = ${slftp_directory}@" /opt/src/slftp/Makefile
    [ ! -d "${slftp_directory}" ] && mkdir -p ${slftp_directory}
    make -s || exit
    make install || exit
    [ "${slftp_wide_system}" = 1 ] && ln -s "${slftp_directory}"/"${slftp_binary_name}" /usr/bin/
    export -f my_function
su username -c "my_function"
}

Missing_SLFTP() {
    Sent_Debug "[RUN] Missing_SLFTP"
    PS3="$(m_tr "Select the operation"): "
    select opt in           \
        "$(m_tr "Install manually")" \
        "$(m_tr "Install automatically")" \
        "$(m_tr "Quit")";
        do
            case $opt in
                "$(m_tr "Install automatically")") Install_SLFTP; sleep 2;;
                "$(m_tr "Install manually")") Sent_MSG "$(m_tr "To install manually visit the URL address: %s")" "${URL_SITE_SLFTP}"; exit 0;;
                "$(m_tr "Quit")") break;;
                *) echo "$(m_tr "Invalid option") $REPLY";;
            esac
        done
    Sent_Debug "[OK] Missing_SLFTP"
}
Missing_FPC() {
    Sent_Debug "[RUN] Missing_FPC"
    if [[ "$(command -v fpc)" == "" ]]; then
        Sent_Error "$(m_tr "(Err_015) FPC (Free Pascal Compiler) est manquant pour compiler slftp.")"
          PS3="$(m_tr "Select the operation"): "
        select opt in           \
          "$(m_tr "Install manually")" \
            "$(m_tr "Install automatically")" \
          "$(m_tr "Quit")";
        do
            case $opt in
                "$(m_tr "Install automatically")") Missing_FPC; sleep 2; Main_Menu; break;;
                "$(m_tr "Install manually")") break;;
                "$(m_tr "Quit")") break;;
                *) echo "$(m_tr "Invalid option") $REPLY";;
            esac
        done
    fi
    Sent_Debug "[OK] Missing_FPC"
}


Unix_User_Create() {
    sudo useradd "${unix_user}" -g "${unix_group}" -G sudo --create-home
}
Unix_User_Exists() {
    return "$(grep -c "$1" /etc/passwd)"
}
Unix_Group_Create() {
    sudo addgroup "${unix_group}"
}
Unix_Group_Exists() {
    return "$(grep -c "$1" /etc/group)"
}




Menu_SLFTP () {
    banner "Menu SLFTP"
    Sent_Debug "[RUN] Menu_SLFTP"
    PS3="$(m_tr "Select the operation"): "
    select opt in           \
        "$(m_tr "Run")"       \
        "$(m_tr "Stop")"       \
        "$(m_tr "Join")"        \
        "$(m_tr "Install")"     \
        "$(m_tr "Update")"      \
        "$(m_tr "Back to main menu")"      \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Run")") Run_SLFTP; sleep 2; Main_Menu; break;;
            "$(m_tr "Stop")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Join")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Install")") Install_SLFTP; sleep 2; Main_Menu; break;;
            "$(m_tr "Update")")  sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
}
Menu_FPC () {
    banner "Free Pascal Compiler"
    Sent_Debug "[RUN] Menu_FPC"
    PS3="$(m_tr "Select the operation"): "
    select opt in           \
        "$(m_tr "Install")"       \
        "$(m_tr "Back to main menu")"      \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Install")") Missing_FPC; sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
}
Menu_slTools () {
    banner "Menu SL-Tools"
    Sent_Debug "[RUN] Menu_slTools"
    PS3="$(m_tr "Select the operation"): "
    select opt in           \
        "$(m_tr "Config")"    \
        "$(m_tr "Update")"    \
        "$(m_tr "Info")"      \
        "$(m_tr "Uninstall")" \
        "$(m_tr "Back to main menu")"       \
        "$(m_tr "Quit")"; do
        case $opt in
            "$(m_tr "Config")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Update")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Info")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Uninstall")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") $REPLY";;
        esac
    done
    Sent_Debug "[OK] Menu_slTools"
}
Main_Menu () {
    banner "Menu main"
    Sent_Debug "[RUN] Main_Menu"
    PS3="$(m_tr "Select the operation"): "
    select opt in           \
        "$(m_tr "Menu SLFTP")"    \
        "$(m_tr "Menu SL-Tools")"    \
        "$(m_tr "Menu cbFTP")"    \
        "$(m_tr "Quit")"; do
        case $opt in
            "$(m_tr "Menu SLFTP")") Menu_SLFTP break;;
            "$(m_tr "Menu SL-Tools")") Menu_slTools break;;
            "$(m_tr "Menu cbFTP")") Menu_slTools break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") $REPLY";;
        esac
    done
    Sent_Debug "[OK] Main_Menu"
}
# Terminal command
console_usage() { 
  Sent_MSG "Usage: $0 " 1>&2 
}
console_run_usage() {
    Sent_MSG "test -> $@"
    
}
console_run() {
    shift
    [[ $1 == "" ]] && console_run_usage $@ && return
    Config_Init
    [[ $1 == "slftp" ]] && Run_SLFTP && return
    [[ $1 == "slftp_internal" ]] && Run_SLFTP_Internal && return
}
console_main() {
   [ "$1" = "--help" -o "$1" = "-h" ] && console_usage
   [[ $1 == "" ]] && return;
   [[ $1 == "run" ]] && console_run $@;
    while getopts ":r:v" options; do 
        case "${options}" in
            v) echo "Sl-Tools V${VER} @ https://github.com/ZarTek-Creole/slTools"; exit ;;
            "r") echo "n = ${OPTARG}"; exit ;;
            *) console_usage;;
        esac
    done
    exit 0    
}

# run sltools
Init
Init_Files
Config_Init
Init_Account_Unix
Init_Binary
console_main "$@"
Main_Menu
#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

source "/opt/sltools/sltools-functions"

Sent_Command() {
    #       -S sessionname
    # When creating a new session, this option can be used to specify a meaningful name for the session. This name identifies the session for "screen -list" and "screen -r" actions. It substitutes the default [tty.host] suffix.
    #       -p number_or_name
    # Preselect a window. This is usefull when you want to reattach to a specific windor or you want to send a command via the "-X" option to a specific window. As with screen's select commant, "-" selects the blank window. As a special case for reattach, "=" brings up the windowlist on the blank windo
    #       -X
    # Send the specified command to a running screen session. You can use the -d or -r option to tell screen to look only for attached or detached screen sessions. Note that this command doesn't work if the session is password protected.
    screen -S "${slftp_screen_name}" -p 0 -X stuff "stop^M"
}

SL_STOP() {
    if slftp_is_run; then 
        /usr/bin/sltools-core stop
    else
       Sent_Error "014" "$(m_tr "slFTP: not running.")"
    fi
}
SL_JOIN() {
    if slftp_is_run; then 
        /usr/bin/sltools-core join
    else
       Sent_Error "014" "$(m_tr "slFTP: not running.")"
    fi
}
SL_STATUS() {
    /usr/bin/sltools-core status
}
SL_START() {
    [[ $(readlink -f -- "${slftp_directory}"/"${slftp_binary_name}") == "" ]] && Sent_Error "006" "$(m_tr "%s is missing." "${slftp_directory}"/"${slftp_binary_name}")"
    cd "${slftp_directory}" || exit
    local re='^[0-9]+$'
    ! [[ ${start_reset_files} =~ ${re} ]] && Sent_Error "007" "$(m_tr "Invalid value for option '%s' , check configuration file." "start_reset_files")"
    [ "${reset_list}" != "" ] && rm -rf "${reset_list}"
    ! [[ "${slftp_restart_onfailure}" =~ ${re} ]] && Sent_Error "008" "$(m_tr "Invalid value for option '%s' , check configuration file." "slftp_restart_onfailure")"
    if slftp_is_run; then 
        Sent_Error "012" "$(m_tr "slFTP: Already running.")"
    fi
    Run_AS_User "screen -dmS ${slftp_screen_name} /usr/bin/sltools-core start"
    ps aux | grep ${unix_user} | grep ${slftp_screen_name}
    exit
}

SL_INSTALL() {
    cd ${__dir} || exit
    [ -d "/opt/src/slftp" ] && Sent_Error "013" "$(m_tr "slFTP: Already installed.")"
    sudo git clone --branch ${slftp_version:-dev} https://gitlab.com/slftp/slftp.git /opt/src/slftp
    cd /opt/src/slftp || exit
    [[ ! -f "/opt/src/slftp/Makefile" ]] && Sent_Error "010" "$(m_tr "Code source need update for %s." "SLFTP")"
    sudo sed -i "s@SLFTPPATH = ~/slftp@SLFTPPATH = ${slftp_directory}@" /opt/src/slftp/Makefile
    [ ! -d "${slftp_directory}" ] && sudo mkdir -p "${slftp_directory}" && sudo chown $(whoami) -R "${slftp_directory}"
    sudo make all_64 || exit
    sudo make install || exit
    cp_file_not_exist /opt/src/slftp/config/slftp.imdbcountries /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.ini /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.knowngroups /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.languagebase /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.precatcher /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.skip /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.skipgroups /opt/slftp/
    cp_file_not_exist /opt/src/slftp/config/slftp.spamconf /opt/slftp/
    [ "${slftp_wide_system}" = 1 ] && sudo ln -s "${slftp_directory}"/"${slftp_binary_name}" /usr/bin/
}

Missing_SLFTP() {
    Sent_Debug "[RUN] Missing_SLFTP"
    PS3="$(m_tr "Select the operation"): "
    select opt in                           \
        "$(m_tr "Install automatically")"   \
        "$(m_tr "Install manually")"        \
        "$(m_tr "Quit")";
        do
            case ${opt} in
                "$(m_tr "Install automatically")") SL_INSTALL; break;;
                "$(m_tr "Install manually")") Sent_MSG "$(m_tr "To install manually visit the URL address: %s" "${URL_SITE_SLFTP}")"; exit 0;;
                "$(m_tr "Quit")") break;;
                *) echo "$(m_tr "Invalid option") ${REPLY}";;
            esac
        done
    Sent_Debug "[OK] Missing_SLFTP"
}

Install_FPC() {
    cd ${__dir} || exit
    dl_wget "${FPC_URL_DOWNLOAD}" "/tmp/fpc-${FPC_VERSION}.${FPC_ARCH}.tar"
    extract_file "/tmp/fpc-${FPC_VERSION}.${FPC_ARCH}.tar" /tmp
    cd "/tmp/fpc-${FPC_VERSION}.${FPC_ARCH}" || exit
    echo -e '/usr\nN\nN\nN\n' | sudo ./install.sh
    rm -rf "/tmp/fpc-${FPC_VERSION}.${FPC_ARCH}.tar" "/tmp/fpc-${FPC_VERSION}.${FPC_ARCH}"
}

Missing_FPC() {
    Sent_Debug "[RUN] Missing_FPC"
    PS3="$(m_tr "Select the operation"): "
    select opt in                           \
        "$(m_tr "Install automatically")"   \
        "$(m_tr "Install manually")"        \
        "$(m_tr "Quit")";
    do
        case ${opt} in
            "$(m_tr "Install automatically")") Install_FPC; break;;
            "$(m_tr "Install manually")") Sent_MSG "$(m_tr "To install manually visit the URL address: %s" "${URL_SITE_FPC}")"; exit 0;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
    Sent_Debug "[OK] Missing_FPC"
}



Menu_SLFTP () {
    banner "Menu SLFTP"
    Sent_Debug "[RUN] Menu_SLFTP"
    PS3="$(m_tr "Select the operation"): "
    select opt in                       \
        "$(m_tr "Start")"               \
        "$(m_tr "Stop")"                \
        "$(m_tr "Restart")"             \
        "$(m_tr "Join")"                \
        "$(m_tr "Status")"              \
        "$(m_tr "Update")"              \
        "$(m_tr "Back to main menu")"   \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Start")") SL_START; sleep 2; Menu_SLFTP; break;;
            "$(m_tr "Stop")") SL_STOP; sleep 2; Menu_SLFTP; break;;
            "$(m_tr "Restart")") SL_STOP; SL_START; sleep 2; Menu_SLFTP; break;;
            "$(m_tr "Join")") SL_JOIN; sleep 2; Menu_SLFTP; break;;
            "$(m_tr "Status")") SL_STATUS; sleep 2; Menu_SLFTP; break;;
            "$(m_tr "Update")")  sleep 2; Menu_SLFTP; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
}
Menu_FPC () {
    banner "Free Pascal Compiler"
    Sent_Debug "[RUN] Menu_FPC"
    PS3="$(m_tr "Select the operation"): "
    select opt in                       \
        "$(m_tr "Install")"             \
        "$(m_tr "Back to main menu")"   \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Install")") Missing_FPC; sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
}
Menu_slTools () {
    banner "Menu SL-Tools"
    Sent_Debug "[RUN] Menu_slTools"
    PS3="$(m_tr "Select the operation"): "
    select opt in                       \
        "$(m_tr "Config")"              \
        "$(m_tr "Update")"              \
        "$(m_tr "Info")"                \
        "$(m_tr "Uninstall")"           \
        "$(m_tr "Back to main menu")"   \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Config")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Update")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Info")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Uninstall")") echo "soon"; sleep 2; Main_Menu; break;;
            "$(m_tr "Back to main menu")") Main_Menu; break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
    Sent_Debug "[OK] Menu_slTools"
}

Main_Menu () {
    banner "Menu main"
    Sent_Debug "[RUN] Main_Menu"
    PS3="$(m_tr "Select the operation"): "
    select opt in                   \
        "$(m_tr "Menu SLFTP")"      \
        "$(m_tr "Menu SL-Tools")"   \
        "$(m_tr "Menu cbFTP")"      \
        "$(m_tr "Quit")"; do
        case ${opt} in
            "$(m_tr "Menu SLFTP")") Menu_SLFTP break;;
            "$(m_tr "Menu SL-Tools")") Menu_slTools break;;
            "$(m_tr "Menu cbFTP")") Menu_slTools break;;
            "$(m_tr "Quit")") break;;
            *) echo "$(m_tr "Invalid option") ${REPLY}";;
        esac
    done
    Sent_Debug "[OK] Main_Menu"
}

# Terminal command
console_main() {
   [[ ! -v "${1:-}" ]] && /usr/bin/sltools-core "$@" && exit 
}

# run sltools
Init
echo "OS FOUND : $_OSFOUND"
Init_Files
Init_Config
Init_Binary
Init_Packages
Init_Account_Unix
Check_CurrentUser
Init_thirds

[[ "${1:-}" == "" ]] && Main_Menu || console_main "$@"
